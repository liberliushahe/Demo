import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * 判断弱密码方法
 * 
 * @author jijiuxue
 * @version 1.0.0 
 * 复杂密码基本规则
 * 口令不能为空
 * 口令长度应大于等于8个字符
 * 口令应由大写字母、小写字母、数字、特殊符号中的3种及以上类型组成
 * 口令不得使用一串相同的数字或字母作为口令
 * 口令不能含有与账号名称相同的英文单词、汉语拼音或其简写
 * 口令中不应含有明确意义的英文单词或汉语拼音
 * 口令不得使用看似符合要求，实为连续键盘序列组合作为口令
 * 校验规则 
 * 1.用户密码中必须包含大写字母,小写字母,数字,特殊符号     
 * 2.判断密码中(数字,字母，特殊字符)不能存在两个以上连续的情况.类似123,qwe(QWE),!@#等情况
 * 3.判断密码中不能存在两个以上(字母，数字，特殊字符)相同的情况.类似11,,qq,!! 
 * 4.密码长度10个字符以上
 * 5.密码中不能出现两次相同的字符 如WsRT_208@W(出现两个W)
 */
public class AuthPassWord {

	public static void main(String[] args) {

		//System.out.println(checkPassWord("Qsycl2036a!"));

		List<String> arr=new ArrayList<String>();
		for(int i=0;i<800;i++){
			String pass=getRandomPassword();
			arr.add(pass);
		}
		for(String t:arr){
			System.out.println("random pass:"+t);
		}
	}

	/**
	 * 获取符合规则随机密码
	 * @return
	 */
	public static String getRandomPassword(){
		//字符数组
		char[] charArray={'1','2','3','4','5','6','7','8','9','0','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','~','!','@','#','$','%','^','&','*'};
		StringBuilder b=new StringBuilder();
        for(int i=0;i<12;i++){
        
        b.append(charArray[new Random().nextInt(charArray.length)]);	
 
        }
        if(checkPassWord(b.toString())){
        	return b.toString();
        }else{
        	
        	return getRandomPassword();
        }
	   
		
	}
	
	/**
	 * 检验密码
	 * 
	 * @param password
	 * @return
	 */
	public static boolean checkPassWord(String password) {
		if (containUpperLowNum(password) && !(matchUpperLowNumContinue(password) || matchUpperLowNumSame(password)
				|| matchCharMoreThanTwo(password))) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * 判断密码中是否存在字母数字特殊字符
	 * 
	 * @param password
	 * @return
	 */

	public static boolean containUpperLowNum(String password) {
		String passwd = password;
		String regex = "^(?=.+)(?=.*[A-Z])(?=.*[a-z])(?=.*[_~!@#$%^&*])[\\da-zA-Z~!@#$%^&*_]{10,}$";
		boolean b = passwd.matches(regex);
		return b;
	}

	/**
	 * 判断字符是否是连续顺序
	 * 
	 * @param password
	 * @return
	 */
	public static boolean matchUpperLowNumContinue(String password) {
		String passwd = password;
		// 连续数字正向
		String regex0 = ".*(0(?=1)|1(?=2)|2(?=3)|3(?=4)|4(?=5)|5(?=6)|6(?=7)|7(?=8)|8(?=9)|9(?=0)){1}.*";
		// 连续数字反向
		String regex1 = ".*(0(?=9)|9(?=8)|8(?=7)|7(?=6)|6(?=5)|5(?=4)|4(?=3)|3(?=2)|2(?=1)){1}.*";
		// 连续键盘小写字母
		String regex2 = ".*(q(?=w)|w(?=e)|e(?=r)|r(?=t)|t(?=y)|y(?=u)|u(?=i)|i(?=o)|o(?=p)|p(?=a)|"
				+ "a(?=s)|s(?=d)|d(?=f)|f(?=g)|g(?=h)|h(?=j)|j(?=k)|k(?=l)|l(?=z)|z(?=x)|"
				+ "x(?=c)|c(?=v)|v(?=b)|b(?=n)|n(?=m)){1}.*";
		// 连续键盘大写字母
		String regex3 = ".*(Q(?=W)|W(?=E)|E(?=R)|R(?=T)|T(?=Y)|Y(?=U)|U(?=I)|I(?=O)|O(?=P)|P(?=A)|"
				+ "A(?=S)|S(?=D)|D(?=F)|F(?=G)|G(?=H)|H(?=J)|J(?=K)|K(?=L)|L(?=Z)|Z(?=X)|X(?=C)|C(?=V)|"
				+ "V(?=B)|B(?=N)|N(?=M)){1}.*";
		// 连续特殊字符
		String regex4 = ".*(~(?=!)|!(?=@)|@(?=#)|#(?=$)|$(?=%)|%(?=^)|^(?=&)|&(?=/*)){1}.*";
		// 字母表顺序小写
		String regex5 = ".*(a(?=b)|b(?=c)|c(?=d)|d(?=e)|e(?=f)|f(?=g)|g(?=h)|h(?=i)|i(?=j)|j(?=k)|"
				+ "k(?=l)|l(?=m)|m(?=n)|n(?=o)|o(?=p)|p(?=q)|q(?=r)|r(?=s)|s(?=t)|t(?=u)|u(?=v)|v(?=w)|"
				+ "w(?=x)|x(?=y)|y(?=z)){1}.*";
		// 字母表顺序大写
		String regex6 = ".*(A(?=B)|B(?=C)|C(?=D)|D(?=E)|E(?=F)|F(?=G)|G(?=H)|H(?=I)|I(?=J)|J(?=K)|"
				+ "K(?=L)|L(?=M)|M(?=N)|N(?=O)|O(?=P)|P(?=Q)|Q(?=R)|R(?=S)|S(?=T)|T(?=U)|U(?=V)|V(?=W)|"
				+ "W(?=X)|X(?=Y)|Y(?=Z)){1}.*";
		boolean b0 = passwd.matches(regex0);
		boolean b1 = passwd.matches(regex1);
		boolean b2 = passwd.matches(regex2);
		boolean b3 = passwd.matches(regex3);
		boolean b4 = passwd.matches(regex4);
		boolean b5 = passwd.matches(regex5);
		boolean b6 = passwd.matches(regex6);
		return (b0 || b1 || b2 || b3 || b4 || b5 || b6);
	}

	/**
	 * 判断相同字符连续出现两次（包含）以上
	 * 
	 * @param password
	 * @return
	 */
	public static boolean matchUpperLowNumSame(String password) {
		String passwd = password;
		String regex0 = ".*(0(?=0)|1(?=1)|2(?=2)|3(?=3)|4(?=4)|5(?=5)|6(?=6)|7(?=7)|8(?=8)|9(?=9)){1}.*";
		String regex1 = "(a(?=a)|b(?=b)|c(?=c)|d(?=d)|e(?=e)|f(?=f)|g(?=g)|h(?=h)|i(?=i)|j(?=j)|"
				+ "k(?=k)|l(?=l)|m(?=m)|n(?=n)|o(?=o)|p(?=p)|q(?=q)|r(?=r)|s(?=s)|t(?=t)|u(?=u)|v(?=v)|"
				+ "w(?=w)|x(?=x)|y(?=y)|z(?=z)){1}.*";
		String regex2 = ".*(A(?=A)|B(?=B)|C(?=C)|D(?=D)|E(?=E)|F(?=F)|G(?=G)|H(?=H)|I(?=I)|J(?=J)|"
				+ "K(?=K)|L(?=L)|M(?=M)|N(?=N)|O(?=O)|P(?=P)|Q(?=Q)|R(?=R)|S(?=S)|T(?=T)|U(?=U)|V(?=V)|"
				+ "W(?=W)|X(?=X)|Y(?=Y)|Z(?=Z)){1}.*";
		String regex3 = ".*(~(?=~)|!(?=!)|@(?=@)|#(?=#)|\\$(?=\\$)|\\%(?=\\%)|\\^(?=\\^)|&(?=&)|_(?=_)){1}.*";
		boolean b0 = passwd.matches(regex0);
		boolean b1 = passwd.matches(regex1);
		boolean b2 = passwd.matches(regex2);
		boolean b3 = passwd.matches(regex3);
		return (b0 || b1 || b2 || b3);
	}

	/**
	 * 判断密码中国是否存在两个以上的相同字符（非连续）
	 * 
	 * @param password
	 * @return
	 */
	public static boolean matchCharMoreThanTwo(String password) {
		String passwd = password;
		String regex0 = ".*(0(?=.+0)|1(?=.+1)|2(?=.+2)|3(?=.+3)|4(?=.+4)|5(?=.+5)|6(?=.+6)|7(?=.+7)|8(?=.+8)|9(?=.+9)){1}.*";
		String regex1 = "(a(?=.+a)|b(?=.+b)|c(?=.+c)|d(?=.+d)|e(?=.+e)|f(?=.+f)|g(?=.+g)|h(?=.+h)|i(?=.+i)|j(?=.+j)|"
				+ "k(?=.+k)|l(?=.+l)|m(?=.+m)|n(?=.+n)|o(?=.+o)|p(?=.+p)|q(?=.+q)|r(?=.+r)|s(?=.+s)|t(?=.+t)|u(?=.+u)|v(?=.+v)|"
				+ "w(?=.+w)|x(?=.+x)|y(?=.+y)|z(?=.+z)){1}.*";
		String regex2 = ".*(A(?=.+A)|B(?=.+B)|C(?=.+C)|D(?=.+D)|E(?=.+E)|F(?=.+F)|G(?=.+G)|H(?=.+H)|I(?=.+I)|J(?=.+J)|"
				+ "K(?=.+K)|L(?=.+L)|M(?=.+M)|N(?=.+N)|O(?=.+O)|P(?=.+P)|Q(?=.+Q)|R(?=.+R)|S(?=.+S)|T(?=.+T)|U(?=.+U)|V(?=.+V)|"
				+ "W(?=.+W)|X(?=.+X)|Y(?=.+Y)|Z(?=.+Z)){1}.*";
		String regex3 = ".*(~(?=.+~)|!(?=.+!)|@(?=.+@)|#(?=.+#)|\\$(?=.+\\$)|\\%(?=.+\\%)|\\^(?=.+\\^)|&(?=.+&)|_(?=.+_)){1}.*";
		boolean b0 = passwd.matches(regex0);
		boolean b1 = passwd.matches(regex1);
		boolean b2 = passwd.matches(regex2);
		boolean b3 = passwd.matches(regex3);
		return (b0 || b1 || b2 || b3);

	}

}
