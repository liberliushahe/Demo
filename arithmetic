//冒泡算法

int[] array={ 3, 1, 6, 2, 9, 0, 7, 4, 5, 8 ,10,23,12,23,45,16,18,19,188};
      int temp;
     for(int i=0;i<array.length;i++){
    	 boolean flag = true;
    	for(int j=0;j<array.length-1-i;j++){
    		if(array[j]>array[j+1]){
    			temp=array[j];
    			array[j]=array[j+1];
    			array[j+1]=temp;
    			flag=false;
    		}
    		//if(flag){
    			//break;
    		//}
    	}    	
     for (int t: array){
    	 System.out.print(Arrays.toString(array);
     }
//二分法检索数据
     int[] arr = { 30,20,50,10,80,9,7,12,100,40,8};
     int searchWord = 20; // 所要查找的数
     Arrays.sort(arr); //数组元素排序
     System.out.println(Arrays.toString(arr));
     int low = 0;
     int high = arr.length - 1;
     while(low<=high){
    	 int middle=(low+high)/2;
    	 if(searchWord==arr[middle]){
    		System.out.println(middle);
		break;
    	 }
    	 if(searchWord > array[middle]){
             low = middle + 1;
         }
         if(searchWord < array[middle]){
             high = middle - 1;
         }
     }
     
     
     
     //以上二分法查找数据的时候发现会陷入死循环，原因是找到数据的时候 最大值和最小值是相等的导致while循环恒成立 所以出现反复打印输出值
     
    //可以通过加break 或者返回该数据解决
    
  //直接选择排序从小到大
  import java.util.Arrays;

public class SelectSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//使用直接选择排序算法，比冒泡算法快一点
       int[] arr={3, 1, 6, 2, 9, 0, 7, 4,5,8};
       for(int i=0;i<arr.length-1;i++){
    	   //保存最大的值
    	   int index=0;
    	  for(int j=0;j<arr.length-i-1;j++){
    		  if(arr[j+1]>arr[index]){
    			  index=j+1;
    		  }
    	  }
          swap(arr,index,arr.length-i-1);
       }
      System.out.println(Arrays.toString(arr));
    		   
	}
	public static void swap(int[] array,int i,int j){
		int temp=array[i];
		array[i]=array[j];
		array[j]=temp;
	}

}
/**
 * 快速排序算法
 * @author liushahe
 * 描述:
 *基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，
 *然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。
 *
 */
public class FastSort{

    public static void main(String []args){
       int[] a = {12,20,5,16,15,1,30,45,23,9};
       int start = 0;
       int end = a.length-1;
       sort(a,start,end);
       for(int i = 0; i<a.length; i++){
            System.out.print(a[i]+",");
        }
       
    }
    
    public static void sort(int[] a,int low,int high){
        int start = low;
        int end = high;
        int key = a[low];
        
        
        while(end>start){
            //从后往前比较
            while(end>start&&a[end]>=key)  //如果没有比关键值小的，比较下一个，直到有比关键值小的交换位置，然后又从前往后比较
                end--;
            if(a[end]<=key){
                int temp = a[end];
                a[end] = a[start];
                a[start] = temp;
            }
            //从前往后比较
            while(end>start&&a[start]<=key)//如果没有比关键值大的，比较下一个，直到有比关键值大的交换位置
               start++;
            if(a[start]>=key){
                int temp = a[start];
                a[start] = a[end];
                a[end] = temp;
            }
        //此时第一次循环比较结束，关键值的位置已经确定了。左边的值都比关键值小，右边的值都比关键值大，但是两边的顺序还有可能是不一样的，进行下面的递归调用
        }
        //递归
        if(start>low) sort(a,low,start-1);//左边序列。第一个索引位置到关键值索引-1
        if(end<high) sort(a,end+1,high);//右边序列。从关键值索引+1到最后一个
    }
    
}


